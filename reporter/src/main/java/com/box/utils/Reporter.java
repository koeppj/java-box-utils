/*
 * This source file was generated by the Gradle 'init' task
 */
package com.box.utils;

import java.io.File;
import java.io.IOException;
import java.util.stream.Stream;

import com.box.sdkgen.box.jwtauth.BoxJWTAuth;
import com.box.sdkgen.box.jwtauth.JWTConfig;
import com.box.sdkgen.client.BoxClient;

import net.sourceforge.argparse4j.ArgumentParsers;
import net.sourceforge.argparse4j.impl.Arguments;
import net.sourceforge.argparse4j.inf.ArgumentParser;
import net.sourceforge.argparse4j.inf.ArgumentParserException;
import net.sourceforge.argparse4j.inf.Namespace;

public class Reporter {
    private ReportRunner reportRunner;

    public static void main(String[] args) {

        ArgumentParser parser = ArgumentParsers.newFor("reporter").build();
        // Add Argument
        parser.addArgument("-c", "--config")
                .required(true)
                .help("Client configuration file path")
                .type(Arguments.fileType().verifyCanRead());
        parser.addArgument("-r", "--report")
                .required(true)
                .help("Report Definition File")
                .type(Arguments.fileType().verifyCanRead());
        parser.addArgument("-o", "--output")
                .required(true)
                .help("Output file path")
                .type(Arguments.fileType().verifyCanCreate());
        
        Namespace ns;
        try {
                ns = parser.parseArgs(args);
                Reporter reporter = new Reporter(ns);// Process the input file and generate report
                reporter.runReport();
        } catch (ArgumentParserException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
        } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
        }
    }

    private void runReport() throws IOException {
        reportRunner.runQuery();
    }

    public Reporter(Namespace arg0) throws IOException {
        // Initialize the reporter with the provided arguments
        File configFile = arg0.get("config");
        File reportConfigFile = arg0.get("report");
        File outputFile = arg0.get("output");

        // Box Client Initialization
        JWTConfig jwtConfig = JWTConfig.fromConfigFile(configFile.getAbsolutePath());
        BoxJWTAuth boxJWTAuth = new BoxJWTAuth(jwtConfig);
        BoxClient client = new BoxClient(boxJWTAuth);

        ReportConfig reportConfig = ReportConfig.fromConfigFile(reportConfigFile);

        String[] reportHeaders = Stream.concat(
                        Stream.of(reportConfig.fileProperties), 
                        Stream.of(reportConfig.fields)
                ).toArray((String[]::new));

        this.reportRunner = new ReportRunner(reportConfig, client, new ReportWriter(outputFile, reportHeaders));
        
    }
}
