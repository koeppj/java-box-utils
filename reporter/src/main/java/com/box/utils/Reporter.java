/*
 * This source file was generated by the Gradle 'init' task
 */
package com.box.utils;

import java.io.File;
import java.io.IOException;

import java.time.ZoneId;

import com.box.sdkgen.box.errors.BoxAPIError;
import com.box.sdkgen.box.jwtauth.BoxJWTAuth;
import com.box.sdkgen.box.jwtauth.JWTConfig;
import com.box.sdkgen.client.BoxClient;

import net.sourceforge.argparse4j.ArgumentParsers;
import net.sourceforge.argparse4j.impl.Arguments;
import net.sourceforge.argparse4j.inf.ArgumentParser;
import net.sourceforge.argparse4j.inf.ArgumentParserException;
import net.sourceforge.argparse4j.inf.Namespace;

public class Reporter {
    private ReportRunner reportRunner;

    public static void main(String[] args) {

        ArgumentParser parser = ArgumentParsers.newFor("reporter").build();
        // Add Argument
        parser.addArgument("-c", "--client")
                .required(true)
                .help("Client configuration file path")
                .type(Arguments.fileType().verifyCanRead());
        parser.addArgument("-r", "--report")
                .required(true)
                .help("Report Definition File")
                .type(Arguments.fileType().verifyCanRead());
        parser.addArgument("-o", "--output")
                .required(true)
                .help("Output file path")
                .type(Arguments.fileType().verifyCanCreate());
        parser.addArgument("-u", "--user")
                .required(false)
                .help("User ID to run the report for")
                .type(String.class);
        parser.addArgument("--format", "-f")
                .dest("format")
                .type(Arguments.enumStringType(OutputFormat.class)) // replacement for enumType
                .choices(OutputFormat.values())                                   // enforce allowed values
                .setDefault(OutputFormat.CSV)
                .help("Format of the output report")
                .metavar("CSV|XLSX");
        parser.addArgument("--timezone")
                .type(new ZoneIdArgumentType())
                .setDefault(ZoneId.systemDefault())
                .help("Timezone ID (e.g. America/New_York). Defaults to system timezone.");

        
        Namespace ns;
        try {
                ns = parser.parseArgs(args);
                Reporter reporter = new Reporter(ns);// Process the input file and generate report
                reporter.runReport();
        } catch (ArgumentParserException e) {
                parser.handleError(e);
        } catch (BoxAPIError e) {
                System.err.println("Box API Error: " + e.getResponseInfo().getBody());
        } catch (IOException e) {
                System.err.println("IO Error: " + e.getMessage());
        } catch (IllegalArgumentException e) {
                System.err.println("Invalid Argument: " + e.getMessage());
        } catch (NullPointerException e) {
                System.err.println("Null Pointer Exception: " + e.getMessage());
                e.printStackTrace();
        } catch (Exception e) {
                System.err.println("Error running reporter: " + e.getMessage());
        }
    }

    private void runReport() throws IOException {
        reportRunner.runQuery();
    }

    public Reporter(Namespace arg0) throws IOException {
        // Initialize the reporter with the provided arguments
        File configFile = arg0.get("client");
        File reportConfigFile = arg0.get("report");
        File outputFile = arg0.get("output");
        ZoneId timezone = (ZoneId) arg0.get("timezone");
        OutputFormat format = (OutputFormat) arg0.get("format");

        // Box Client Initialization
        JWTConfig jwtConfig = JWTConfig.fromConfigFile(configFile.getAbsolutePath());
        BoxJWTAuth boxJWTAuth = new BoxJWTAuth(jwtConfig);
        BoxClient client = new BoxClient(boxJWTAuth);
        if (arg0.get("user") != null) {
            client = client.withAsUserHeader(arg0.getString("user"));
        }

        ReportConfig reportConfig = ReportConfig.fromConfigFile(reportConfigFile).withEid(jwtConfig.getEnterpriseId());
        this.reportRunner = new ReportRunner(reportConfig, client, outputFile, format, timezone);
    }
}
