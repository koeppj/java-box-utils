/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'distribution'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

configurations {
    runOnly
}

distributions {
    main {
        contents {
            from("$projectDir/test/etc") {
                include("*.sample","README.md")
                into('etc')
            }
            from("$projectDir/test/output") {
                include("README.md")
                into('output')
            }
        }
    }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
    implementation 'com.box:box-java-sdk-gen:0.7.0'
    implementation 'net.sourceforge.argparse4j:argparse4j:0.9.0'
    implementation 'org.apache.commons:commons-csv:1.14.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
    implementation 'org.slf4j:slf4j-nop:2.0.16'
    implementation 'org.apache.poi:poi-ooxml:5.2.5'
    implementation 'org.apache.logging.log4j:log4j-core:2.23.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.23.0'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'com.box.utils.Reporter'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
    workingDir = file("$projectDir/test")
}

tasks.named('run') {
    workingDir = file("$projectDir/test")
    classpath += files("$projectDir/test/etc") + configurations.runOnly
    doFirst {
        standardOutput = System.out
        errorOutput = System.err
    }
}